<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 
		1. applicationContext.xml은 스프링 환경설정 파일입니다.
			이곳에서 객체를 생성합니다.
			루트 엘리먼트는 <beans>이고 그 아래 엘리먼트는 <bean> 엘리먼트를 이용하여
			빈에 관한 정의를 기술함
			
		2. 스프링에서는 자바 객체를 bean이라고 부름
		
		3. 값을 설정해 놓은 것을 주입(Injection)한다라고 함
			의존성 주입(Dependency Injection : DI)
			- 객체 사이의 의존 관계를 자기 자신이 아닌 외부에 의해서 설정된다는 개념
			- 의존하는 객체를 직접 생성하지 않고 의존 객체를 전달받는 방식을 사용
			- 각 클래스사이에 필요로 하는 의존관계가 있다면 이를 컨테이너가 자동적으로 연결시켜주는 것
			
			(1) 생성자를 이용한 주입(constructor DI) :
				생성자를 통해서 의존관계를 연결시키는 것으로 생성자를 사용
				
				- 생성자 argument가 한 개인 경우
				<constructor-arg>
					<value>Spring</value>
				</constructor-arg>
				같은 의미로
				<constructor-arg value="Spring">
				
				- 생성자 argument가 두 개인 경우 (index 속성을 이용)
				<constructor-arg index="0">
					<value>Spring</value>
				</constructor-arg>
				
			(2) property를 이용한 주입(property DI) : 
				클래스의 의존 관계를 연결시키기 위해서 setter 메서드를 이용
				반드시 프로퍼티 setter 메서드가 있어야 사용 가능
				name 속성 : setter 메서드의 프로퍼티 이름
				
				<property name="greeting">
					<value>안녕하세요</value>
				</propery>
				같은 의미로
				<property name="greeting" value="안녕하세요" />
				-> setGreeting()메서드에 값을 저장
				
		4. IOC (Inversion of Control : 제어의 역행)
			자신이 사용할 오브젝트를 개발자가 생성하고 의존관계를 연결시키는 등 제어권을 개발자가 직접 갖고 있었지만 스프링에서는 
			객체에 대한 제어권이 컨테이너에게 넘어가면서 객체의 생명주기를 관리하는 권한 또한 컨테이너가 전담
			이처럼 객체의 생성에서부터 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀐것을 의미
	 -->
	
	<bean id="m2" class="com.naver.myhome1.sample4.MessageBeanImpl">
		<constructor-arg>
			<value>Spring</value>
		</constructor-arg>
		<property name="greeting">
			<value>안녕하세요!</value>
		</property>
	</bean>
</beans>